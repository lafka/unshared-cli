#!/bin/sh
#
# This file is part of unshared-cli

# Copyright (c) 2013, Olav Frengstad
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

set -e

UNSHARED_ROOT=${UNSHARED_ROOT:-/var/unshared}
UNSHARED_ARGS=""

export NAME
export ROOT="${ROOT:-/}"
export EXPR="${EXPR:=}"
export MOUNT="${MOUNT:-}"
export PRECHROOT="${PRECHROOT:-}"
export CHROOT="${CHROOT:-chroot}"
export POSTEXEC="${POSTEXEC:-}"
       PREEXEC=""
fork="no"

get_root() {
	if echo $1 | grep -qP '^/'; then
		echo $1;
	else
		[ ! -z "$1" ] && echo $UNSHARED_ROOT/$1 || echo "/"
	fi;
}

cleanup() {
	echo "=> Exiting ..."
	pkill -P $(pgrep -P $$)
}

run() {
	case $1 in
		get-root )
			[ -z "$2" ] && { echo "usage: $0 $1 <name>"; exit 1; }

			get_root $2
			exit 0 ;;

		spawn )
			shift
			parse_args $@
			run_unshare ;;

		attach )
			shift
			netns=$1
			shift
			ip netns exec $netns $@
			;;

		invoker )
			echo "=> Mounting ..."
			eval $MOUNT

			echo "=> Preparing chroot ..."
			eval $PRECHROOT

			echo "=> Entering chroot ..."

			eval $CHROOT $ROOT $EXPR

			echo "=> Post-exec ..."
			eval $POSTEXEC
			;;

		"" )
			echo "usage: $0 spawn|invoker|get-root"
			exit 0 ;;

		* )
			echo "error: unknown command '$1'"
			echo "usage: $0 spawn|invoker|get-root"
			exit 1 ;;
	esac
}

trim() {
	echo $@ | sed -Ee 's/^(&&|\s)+//;s/(&&|\s)+$//'
}

parse_args() {
	while test $# -gt 0; do
		_data_src=""; _data_target="" _data_opts=""
		case $1 in
			--mount | --uts | --ipc | --net | --pid | --user )
				UNSHARED_ARGS="$UNSHARED_ARGS $1"
				shift ;;

			--name )
				NAME=$2
				shift 2;;

			--root )
				ROOT=$(get_root $2)
				shift 2;;

			--exec )
				shift;
				while test $# -gt 0; do case $1 in
					-*) break 1 ;;
					* ) EXPR="$EXPR $1"; shift ;;
				esac; done ;;

			--preexec )
				shift;
				while test $# -gt 0; do case $1 in
					-*) break 1 ;;
					* ) PREEXEC="$PREEXEC $1"; shift ;;
				esac; done ;;

			--postexec )
				shift;
				while test $# -gt 0; do case $1 in
					-*) break 1 ;;
					* ) POSTEXEC="$POSTEXEC $1"; shift ;;
				esac; done ;;

			--prechroot )
				shift;
				while test $# -gt 0; do case $1 in
					-*) PRECHROOT="$PRECHROOT && "; break 1 ;;
					* ) PRECHROOT="$PRECHROOT $1"; shift ;;
				esac; done ;;

			--chroot )
				shift;
				CHROOT=
				while test $# -gt 0; do case $1 in
					-*) break 1 ;;
					* ) CHROOT="$CHROOT $1"; shift ;;
				esac; done ;;

			--data-dir )
				_data_src=$(echo $2 | awk -F: '{print $1}')
				_data_target=$(echo $2 | awk -F: '{print $2}')

				[ -z "$_data_src" ] || [ -z "$_data_target" ] && {
					echo "error: invalid argument '--data-dir $2'";
					exit 1; }

				[ ! -e "$_data_src" ] && {
					echo "error: data-dir '$_data_src' does not exists";
					exit 1; }

				[ -d $_data_src ] && _data_opts="-o bind"

				# mount get evaluated later, to we can bind $root lazily
				PREEXEC="$PREEXEC && mkdir -p \$ROOT/${_data_target}"
				POSTEXEC="$POSTEXEC && umount \$ROOT/${_data_target}"
				MOUNT="$MOUNT && mount ${_data_opts} ${_data_src} \$ROOT/${_data_target} && mount --make-private \$ROOT/${_data_target}"

				shift 2 ;;
			--fork)
				fork="yes"
				;;
			--)
				shift;
				EXPR="$EXPR && $@"
				break ;;
			* )
				echo "error: invalid argument: '$1'"
				exit 1 ;;
		esac
	done
	PREEXEC=$(trim $PREEXEC)
	PRECHROOT=$(trim $PRECHROOT)
	EXPR=$(trim $EXPR)
	POSTEXEC=$(trim $POSTEXEC)
	NAME=${NAME:-"u-$(tr -cd 'a-z0-9A-Z' < /dev/urandom | head -c 4)"}
}

run_unshare() {
	if echo $EXPR | grep -P ';|&&|\|\|'; then
		echo "error: Can't use &&, || or ; operator in exec"
		echo "Are you using multiple exec statements???"
		exit 1
	fi

	if [ "yes" == $fork ] && [ ! -z "$POSTEXEC" ]; then
		echo "error: Forking will not handle any tasks defined with --postexec"
		exit 1
	fi

	# expand mount
	PREEXEC=$(eval 'echo '$(echo $PREEXEC | sed 's/&/\\&/g'))
	POSTEXEC=$(eval 'echo '$(echo $POSTEXEC | sed 's/&/\\&/g'))
	PRECHROOT=$(eval 'echo '$(echo $PRECHROOT | sed 's/&/\\&/g'))
	MOUNT=$(eval 'echo '$(echo $MOUNT | sed 's/&/\\&/g'))

	echo "=> Performing pre-exec tasks ..."
	eval $PREEXEC || { echo "error executing preexec exiting"; exit 2; }

	echo "=> Calling unshare [$UNSHARED_ARGS]"
	exec env -i \
		ROOT=$ROOT \
		NAME=$NAME \
		EXPR="$EXPR" \
		MOUNT="$MOUNT" \
		PRECHROOT="$PRECHROOT" \
		POSTEXEC="$POSTEXEC" \
		CHROOT="$CHROOT" \
		unshare $UNSHARED_ARGS $0 invoker
}

run $@
